"use strict";(self.webpackChunkfeed_specification=self.webpackChunkfeed_specification||[]).push([[8650],{3905:(e,t,n)=>{n.d(t,{Zo:()=>f,kt:()=>c});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},f=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,f=i(e,["components","mdxType","originalType","parentName"]),u=d(n),c=a,m=u["".concat(l,".").concat(c)]||u[c]||p[c]||o;return n?r.createElement(m,s(s({ref:t},f),{},{components:n})):r.createElement(m,s({ref:t},f))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var d=2;d<o;d++)s[d]=n[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6215:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:2},s="Delta Feeds",i={unversionedId:"types-of-feeds/pull/delta-feeds",id:"types-of-feeds/pull/delta-feeds",title:"Delta Feeds",description:"Delta feeds is a way of splitting up your inventory to a base feed and then periodically supplying small files with only the changes. This improves the amount of offers and the average time for offer updates by just sending the information changed.",source:"@site/docs/types-of-feeds/pull/delta-feeds.md",sourceDirName:"types-of-feeds/pull",slug:"/types-of-feeds/pull/delta-feeds",permalink:"/docs/types-of-feeds/pull/delta-feeds",draft:!1,editUrl:"https://github.com/Prisjakt/feed-specification/tree/master/docs/types-of-feeds/pull/delta-feeds.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Pull",permalink:"/docs/category/pull"},next:{title:"Feeds",permalink:"/docs/types-of-feeds/pull/feed"}},l={},d=[{value:"Advantages",id:"advantages",level:2},{value:"Disadvantages",id:"disadvantages",level:2},{value:"Flow",id:"flow",level:2}],f={toc:d};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"delta-feeds"},"Delta Feeds"),(0,a.kt)("p",null,"Delta feeds is a way of splitting up your inventory to a base feed and then periodically supplying small files with only the changes. This improves the amount of offers and the average time for offer updates by just sending the information changed."),(0,a.kt)("p",null,"Delta files can be read at a higher frequency and contains offers + an ",(0,a.kt)("inlineCode",{parentName:"p"},"action field")," for each offer that specifies if the offer should be ",(0,a.kt)("inlineCode",{parentName:"p"},"added/updated/removed"),"."),(0,a.kt)("h2",{id:"advantages"},"Advantages"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Can handle large volumes (> millions of offers)"),(0,a.kt)("li",{parentName:"ul"},"Average time for price update is low (< 10min)")),(0,a.kt)("h2",{id:"disadvantages"},"Disadvantages"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Complex for to setup (requires work on webserver to produce delta files)")),(0,a.kt)("h2",{id:"flow"},"Flow"),(0,a.kt)("mermaid",{value:"%%{init: {'theme':'neutral'}}%%\nsequenceDiagram\n    participant A as Prisjakt Agent\n    participant S as Delta Scheduler\n    participant F as Your Web Server\n\n    S->>F: Requests feed list every 5 minutes: <Your Delta Base Url>\n    F->>S: Responds with a list of urls \n    note over F,S: List contains multiple base urls and deltas per category. \n    note over F,S: May change between requests (delta feeds added)\n\n    loop For each segment/main category\n        alt If full read should be done\n            note over S,A: Full read happens first time + every week\n            S->>A: Initiates ingestion\n            A->>F: Requests Feed From Base Url: <Category Base Url>\n            F->>A: Responds With Feed\n            A->>A: Ingests Feed\n        else If delta read should be done\n            S->>A: Initiates ingestion\n            A->>A: Retrieves last stored delta number and timestamp\n            A->>F: Requests next delta feed\n            F->>A: Responds with delta feed\n            A->>A: Ingests delta feed\n            A->>A: Stores last ingested delta number and timestamp\n            note over A: We also store a ingestion run for the delta run\n        end\n    end"}))}p.isMDXComponent=!0}}]);